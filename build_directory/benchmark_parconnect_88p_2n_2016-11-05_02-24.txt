Command:		/usr/local/openmpi-gcc/bin/mpirun --mca btl openib,self,sm --nooversubscribe -np 88 --map-by node -machinefile /var/spool/torque/aux//568.nibbler ./bin/benchmark_parconnect --input dbg --file input/40,000,000.fastq
Resources:		2 nodes (44 physical, 44 logical cores per node)
Memory:			63 GiB per node
Tasks:			88 processes
Machine:		node7
Started on:		Sat Nov 5 02:24:03 2016
Total time:		1758 seconds (29 minutes)
Executable:		benchmark_parconnect
Full path:		/home/tuan/parconnect_SCC16/build_directory/bin
Input file:		
Notes:			

Summary: benchmark_parconnect is MPI-bound in this configuration
Compute:				          28.5% |==|
MPI:					          71.5% |======|
I/O:					           0.0% |
This application run was MPI-bound. A breakdown of this time and advice for investigating further is found in the MPI section below.


CPU:
A breakdown of the 28.5% total compute time:
Scalar numeric ops:			           1.0% |
Vector numeric ops:			           0.0% |
Memory accesses:			          98.8% |=========|
The per-core performance is memory-bound. Use a profiler to identify time-consuming loops and check their cache performance.
No time is spent in vectorized instructions. Check the compiler's vectorization advice to see why key loops could not be vectorized.

Threads:
A breakdown of how multiple threads were used:
Computation:				          82.5% |=======|
Synchronization:			          17.5% |=|
Physical core utilization:		         100.0% |=========|
System load:				          88.3% |========|
Thread usage appears to be well-optimized. Check the CPU breakdown for advice on further improving performance.


MPI:
A breakdown of the 71.5% MPI time:
Time in collective calls:		          99.4% |=========|
Time in point-to-point calls:		           0.6% |
Effective process collective rate:	       1.57e+07 bytes/s
Effective process point-to-point rate:	           9.41 bytes/s
Most of the time is spent in collective calls with a low transfer rate. This can be caused by inefficient message sizes, such as many small messages, or by imbalanced workloads causing processes to wait.


I/O:
A breakdown of the 0.0% I/O time:
Time in reads:				           0.0% |
Time in writes:				           0.0% |
Effective process read rate:		              0 bytes/s
Effective process write rate:		              0 bytes/s
No time is spent in I/O operations. There's nothing to optimize here!


Memory:
Per-process memory usage may also affect scaling:
Mean process memory usage:		       9.42e+08 bytes
Peak process memory usage:		       1.48e+09 bytes
Peak node memory usage:			          99.0% |=========|
There is significant variation between peak and mean memory usage. This may be a sign of workload imbalance or a memory leak.

